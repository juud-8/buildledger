{
  "permissions": {
    "allow": [
      "Bash(npm start)",
      "Bash(start /B npm run start)",
      "Bash(npm run start:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "Bash(vercel:*)",
      "Bash(find:*)",
      "WebFetch(domain:www.buildledger.pro)",
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run:*)",
      "Bash(supabase functions invoke:*)",
      "Bash(npx supabase functions invoke:*)",
      "Bash(node:*)",
      "Bash(SUPABASE_URL=https://lncppcvrhdduvobirzsv.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxuY3BwY3ZyaGRkdXZvYmlyenN2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDM1NDczNiwiZXhwIjoyMDY5OTMwNzM2fQ.x3IG9nJIJSTeP42mQ9f6VcdtvafZhof31KgEjhLkr-k node scripts/setup-user-accounts.js)",
      "Bash(SUPABASE_URL=https://lncppcvrhdduvobirzsv.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxuY3BwY3ZyaGRkdXZvYmlyenN2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDM1NDczNiwiZXhwIjoyMDY5OTMwNzM2fQ.x3IG9nJIJSTeP42mQ9f6VcdtvafZhof31KgEjhLkr-k node scripts/setup-user-accounts-final.js)",
      "Bash(npm install:*)",
      "Bash(git checkout:*)",
      "Bash(npx eslint:*)",
      "Bash(npm outdated)",
      "Bash(npm view:*)",
      "Bash(npm uninstall:*)",
      "Bash(grep:*)",
      "Bash(npx supabase:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(SUPABASE_URL=https://lncppcvrhdduvobirzsv.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxuY3BwY3ZyaGRkdXZvYmlyenN2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDM1NDczNiwiZXhwIjoyMDY5OTMwNzM2fQ.x3IG9nJIJSTeP42mQ9f6VcdtvafZhof31KgEjhLkr-k node scripts/run-migrations.js)",
      "Bash(SUPABASE_URL=https://lncppcvrhdduvobirzsv.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxuY3BwY3ZyaGRkdXZvYmlyenN2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDM1NDczNiwiZXhwIjoyMDY5OTMwNzM2fQ.x3IG9nJIJSTeP42mQ9f6VcdtvafZhof31KgEjhLkr-k node scripts/setup-database.js)",
      "Bash(SUPABASE_URL=https://lncppcvrhdduvobirzsv.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxuY3BwY3ZyaGRkdXZvYmlyenN2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDM1NDczNiwiZXhwIjoyMDY5OTMwNzM2fQ.x3IG9nJIJSTeP42mQ9f6VcdtvafZhof31KgEjhLkr-k node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nconst supabase = createClient(\n  ''https://lncppcvrhdduvobirzsv.supabase.co'',\n  ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxuY3BwY3ZyaGRkdXZvYmlyenN2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDM1NDczNiwiZXhwIjoyMDY5OTMwNzM2fQ.x3IG9nJIJSTeP42mQ9f6VcdtvafZhof31KgEjhLkr-k''\n);\n\nconst sql = \\`-- Create enum type for client_type\nCREATE TYPE IF NOT EXISTS public.client_type AS ENUM (''residential'', ''commercial'', ''industrial'', ''government'');\n\n-- Add client_type column\nALTER TABLE public.clients \nADD COLUMN IF NOT EXISTS client_type public.client_type DEFAULT ''residential'';\n\n-- Add other missing columns\nALTER TABLE public.clients \nADD COLUMN IF NOT EXISTS payment_terms TEXT DEFAULT ''net30'',\nADD COLUMN IF NOT EXISTS preferred_contact_method TEXT DEFAULT ''email'';\n\n-- Create index for better performance\nCREATE INDEX IF NOT EXISTS idx_clients_client_type ON public.clients(client_type);\\`;\n\nconsole.log(''🔧 Applying database fixes...'');\n\n// Try different approaches to execute SQL\nasync function fixDatabase() {\n  try {\n    // Method 1: Try using edge function call\n    const { data, error } = await supabase.functions.invoke(''exec-sql'', {\n      body: { query: sql }\n    });\n    \n    if (!error) {\n      console.log(''✅ Database fixed via edge function'');\n      return true;\n    }\n    \n    console.log(''Method 1 failed, trying direct RPC...'');\n    \n    // Method 2: Try RPC call (if custom function exists)\n    const { data: data2, error: error2 } = await supabase.rpc(''exec_sql'', { sql: sql });\n    \n    if (!error2) {\n      console.log(''✅ Database fixed via RPC'');\n      return true;\n    }\n    \n    console.log(''Method 2 failed, trying manual column addition...'');\n    \n    // Method 3: Manual approach - check if column exists by trying to select it\n    const { data: testData, error: testError } = await supabase\n      .from(''clients'')\n      .select(''client_type'')\n      .limit(1);\n    \n    if (testError && testError.code === ''PGRST116'') {\n      console.log(''❌ client_type column definitely missing'');\n      console.log(''Need manual SQL execution via dashboard'');\n      return false;\n    } else {\n      console.log(''✅ client_type column already exists or database is fixed'');\n      return true;\n    }\n    \n  } catch (err) {\n    console.error(''Error:'', err);\n    return false;\n  }\n}\n\nfixDatabase().then(success => {\n  if (success) {\n    console.log(''🎉 Database is ready for client creation!'');\n  } else {\n    console.log(''❌ Please run SQL manually via Supabase dashboard'');\n  }\n});\n\")"
    ],
    "deny": []
  }
}